/*
 * Copyright 2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    jcenter()
    google()
    maven { url 'https://plugins.gradle.org/m2/' }
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:3.0.0'
    classpath 'org.codehaus.groovy:groovy-android-gradle-plugin:1.2.0'
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.5.4'
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
    classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.2.0'
    classpath 'com.gradle:build-scan-plugin:1.10'
    classpath 'com.gradle.publish:plugin-publish-plugin:0.9.9'
  }
}

apply plugin: 'com.gradle.build-scan'
apply from: "$rootDir/gradle/idea/idea.gradle"

allprojects {
  version = '1.3.0-SNAPSHOT'
  group = 'org.codehaus.groovy'

  apply plugin: 'com.github.ben-manes.versions'
  apply from: "$rootDir/gradle/credentials.gradle"

  dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
      rules.all { ComponentSelection selection ->
        boolean rejected = ['alpha', 'beta', 'preview'].any { qualifier ->
          selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
        }
        if (rejected) {
          selection.reject('Release candidate')
        }
      }
    }
  }
}

subprojects {
  apply from: "$rootDir/gradle/projectLocalRepo.gradle"
  apply from: "$rootDir/gradle/androidGroovyLocal.gradle"

  repositories {
    jcenter()
    google()
  }
}

buildScan {
  licenseAgreementUrl = 'https://gradle.com/terms-of-service'
  licenseAgree = 'yes'
}

ext {
  androidPluginVersion = androidPluginVersion
  buildToolsVersion = '26.0.2'
  compileSdkVersion = 26
  spockVersion = '1.1-groovy-2.4'
  androidSupportTestVersion = '1.0.1'
  groovyVersion = '2.4.12'
}

task prepareRelease(type: Exec) {
  description = 'Prepare for a release: Ensure branch is up to date'
  group = 'Publishing'

  commandLine 'bash', '-c',
"""
  git checkout master
  git pull --rebase "https://$project.githubToken@github.com/groovy/groovy-android-gradle-plugin.git" master
  git checkout -b release/${version}
"""
}

task tagRelease(type: Exec) {
  description = 'Tag the release and push it to github'
  group = 'Publishing'

  def tagString = "RELEASE_${version.replace('.', '_')}"
  commandLine 'bash', '-c',
"""
  git tag $tagString
  git push -q "https://$project.githubToken@github.com/groovy/groovy-android-gradle-plugin.git" $tagString > /dev/null 2>&1
"""
}

/**
 * Return the Android Gradle Plugin version for the buildscript so it may be used through out the project, and only
 * one place to set this value.
 */
String getAndroidPluginVersion() {
  return project.buildscript.configurations.classpath.resolvedConfiguration.firstLevelModuleDependencies.find {
    it.moduleGroup == 'com.android.tools.build' && it.moduleName == 'gradle'
  }.moduleVersion
}
